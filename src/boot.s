;************************************************************************
;   ブートプログラム
;************************************************************************

;************************************************************************
;   マクロ
;************************************************************************
%include    "define.s"
%include    "macro.s"

        ORG         BOOT_LOAD               ; ロード先のアドレス(0x7C00)を指定

;************************************************************************
;   エントリポイント
;************************************************************************
entry:
        jmp     ipl                         ; iplへジャンプ
        times   90 - ($ - $$) db 0x90       ; 90の位置まで0x90(NOP)で埋める

		;---------------------------------------
		; IPL(Initial Program Loader)
		;---------------------------------------
ipl:
        cli                                 ; 割り込み禁止

        mov     ax, 0x0000
        mov     ds, ax
        mov     es, ax
        mov     ss, ax
        mov     sp, BOOT_LOAD               ; SP = 0x7C00

        sti                                 ; 割り込み許可

        mov     [boot + drive.no], dl       ; ブートドライブを保存

        cdecl   puts, .s0                   ; puts(.s0);

        ;--------------------------------
        ; 残りのセクタを全て読み込む
        ;--------------------------------
        mov     bx, BOOT_SECT - 1           ; BX = 残りのブートセクタ数
        mov     cx, BOOT_LOAD + SECT_SIZE   ; CX = 次のロードアドレス

        cdecl   read_chs, boot, bx, cx      ; AX = read_chs(.chs, bx, cx);

        cmp     ax, bx
        jz      .success                    ; if (AX == BX) goto .success

.error:
        cdecl   puts, .e0                   ; エラーメッセージ表示
        jmp     $                           ; while (true) ;

.success:
        cdecl   puts, .s1                   ; 成功メッセージ表示
        jmp     stage_2                     ; goto stage_2

        ;--------------------------------
        ; データ
        ;--------------------------------
.s0     db      "HonyaOS Booting...", 0x0A, 0x0D, 0
.s1     db      "Success:sector read", 0x0A, 0x0D, 0
.e0     db      "Error:sector read", 0x0A, 0x0D, 0

;************************************************************************
;   ブートドライブに関する情報
;************************************************************************
ALIGN 2, db 0
boot:                                       ; ブートドライブに関する情報
    istruc  drive
        at  drive.no,       dw  0           ; ドライブ番号
        at  drive.cyln,     dw  0           ; C:シリンダ
        at  drive.head,     dw  0           ; H:ヘッド
        at  drive.sect,     dw  2           ; S:セクタ
    iend

;************************************************************************
;   モジュール
;************************************************************************
%include    "modules/real/puts.s"
%include    "modules/real/read_chs.s"

;************************************************************************
;   ブートフラグ（先頭512バイトの終了）
;************************************************************************
        times   510 - ($ - $$) db 0x00
        db      0x55, 0xAA

;************************************************************************
;   モジュール（先頭512バイト以降に配置）
;************************************************************************
%include    "modules/real/itoa.s"
%include    "modules/real/get_drive_param.s"

;************************************************************************
;	ブート処理の第2ステージ
;************************************************************************
stage_2:
        cdecl   puts, .s0                       ; puts(.s0);

        ;--------------------------------
        ; ドライブ情報を取得
        ;--------------------------------
        cdecl   get_drive_param, boot           ; AX = get_drive_param(boot);
        cmp     ax, 0
        jne     .10E                            ; if (AX != 0) goto .10E
.10T:
        cdecl   puts, .e0                       ; puts(.e0);
        hlt
        jmp     $                               ; while (1) ;   // 無限ループ

.10E:
        ;--------------------------------
        ; ドライブ情報を表示
        ;--------------------------------
        mov     ax, [boot + drive.no]           ; AX = ブートドライブ
        cdecl   itoa, ax, .p1, 2, 16, 0b0100    ;
        mov     ax, [boot + drive.cyln]         ;
        cdecl   itoa, ax, .p2, 4, 16, 0b0100    ;
        mov     ax, [boot + drive.head]         ; AX = ヘッド数;
        cdecl   itoa, ax, .p3, 2, 16, 0b0100    ;
        mov     ax, [boot + drive.sect]         ; AX = トラックあたりのセクタ数;
        cdecl   itoa, ax, .p4, 2, 16, 0b0100    ;
        cdecl   puts, .s1

        hlt
        jmp     $                           ; while (1) ;   // 無限ループ

        ;--------------------------------
        ; データ
        ;--------------------------------
.s0     db  "2nd stage...", 0x0A, 0x0D, 0

.s1     db  " Drive:0x"
.p1     db  "  , C:0x"
.p2     db  "    , H:0x"
.p3     db  "  , S:0x"
.p4     db  "  ", 0x0A, 0x0D, 0

.e0     db  "Can't get drive parameter.", 0x0A, 0x0D, 0

;************************************************************************
;   パティング（このファイルは8KBとする）
;************************************************************************
        times BOOT_SIZE - ($ - $$) db 0    ; 8KB
