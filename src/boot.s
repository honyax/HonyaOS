;************************************************************************
;   ブートプログラム
;************************************************************************
        BOOT_LOAD   equ     0x7C00          ; ブートプログラムのロード位置(0x7C00)
        ORG         BOOT_LOAD               ; ロード先のアドレス(0x7C00)を指定

;************************************************************************
;   マクロ
;************************************************************************
%include    "macro.s"

;************************************************************************
;   エントリポイント
;************************************************************************
entry:
        jmp     ipl                         ; iplへジャンプ
        times   90 - ($ - $$) db 0x90       ; 90の位置まで0x90(NOP)で埋める

ipl:
        cli                                 ; 割り込み禁止

        mov     ax, 0x0000
        mov     ds, ax
        mov     es, ax
        mov     ss, ax
        mov     sp, BOOT_LOAD               ; SP = 0x7C00

        sti                                 ; 割り込み許可

        mov     [BOOT.DRIVE], dl            ; ブートドライブを保存

        cdecl   puts, .s0                   ; puts(.s0);

        ;--------------------------------
        ; 次の512バイトを読み込む
        ;--------------------------------
        mov     ah, 0x02                    ; AH = 読み込み命令
        mov     al, 1                       ; AL = 読み込みセクタ数(1)
        mov     ch, 0x00                    ; CH = シリンダ(0)
        mov     dh, 0x00                    ; DH = ヘッド(0)
        mov     cl, 0x02                    ; CL = セクタ(2)
        mov     dl, [BOOT.DRIVE]            ; DL = ドライブ番号
        mov     bx, BOOT_LOAD + 512         ; BX = オフセット(0x7E00)
        int     0x13                        ; CF = BIOS(0x13, 0x02); ディスクBIOS呼び出し
        jnc     .success                    ; if (!CF) goto .10E; キャリーフラグが立っていなければOK.

.error:
        cdecl   puts, .e0                   ; エラーメッセージ表示
        jmp     $                           ; while (true) ;

.success:
        cdecl   puts, .s1                   ; 成功メッセージ表示
        jmp     stage_2

        ;--------------------------------
        ; データ
        ;--------------------------------
.s0     db      "HonyaOS Booting...", 0x0A, 0x0D, 0
.s1     db      "Success:sector read", 0x0A, 0x0D, 0
.e0     db      "Error:sector read", 0x0A, 0x0D, 0

ALIGN 2, db 0
BOOT:                                       ; ブートドライブに関する情報
.DRIVE:         dw 0                        ; ドライブ番号

;************************************************************************
;   モジュール
;************************************************************************
%include    "modules/real/puts.s"

;************************************************************************
;   ブートフラグ（先頭512バイトの終了）
;************************************************************************
        times   510 - ($ - $$) db 0x00
        db      0x55, 0xAA

stage_2:
        hlt
        jmp     $                           ; while (1) ;   // 無限ループ

;************************************************************************
;   パティング（このファイルは8KBとする）
;************************************************************************
        times (1024 * 8) - ($ - $$) db 0    ; 8KB
